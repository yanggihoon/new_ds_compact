/* cmxDeviceServiceStub.h
   Generated by gSOAP 2.7.6e from ds_intf.h
   Copyright (C) 2000-2005, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef cmxDeviceServiceStub_H
#define cmxDeviceServiceStub_H
#define WITH_NONAMESPACES
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"

namespace cmxDeviceService {

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_cmxDeviceService_ns__enum_devInfo
#define SOAP_TYPE_cmxDeviceService_ns__enum_devInfo (6)
/* ns:enum-devInfo */
enum ns__enum_devInfo {_dummy = 0, _boiler = 1, _light = 2, _gasValve = 3, _doorLock = 4, _outlet = 5, _curtain = 6, _airCleaner = 7, _bide = 8, _aroma = 9, _rf = 10, _zlplc = 11, _bundleLight = 12, _systemAircon = 13, _fanSystem = 14, _aircon = 21, _washMachine = 22, _dishWashMachine = 23, _gasOven = 24, _microwave = 25, _television = 26, _audio = 27, _vtr = 28, _dvd = 29, _refrigerator = 30, _kRefrigeator = 31, _securitySensor = 32, _sensorEmer = 33, _exTerminal = 34, _protoCommax = 35, _protoNokSung = 36, _protoLnCP = 37, _protoSCUBE = 38, _protoZ256 = 39, _protoICROSS = 40, _protoSamsung = 41, _protoHaMun = 42, _intfPLC = 43, _intfRF = 44, _intfRS485 = 45, _intfLAN = 46};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__enum_devError
#define SOAP_TYPE_cmxDeviceService_ns__enum_devError (7)
/* ns:enum-devError */
enum ns__enum_devError {devError_no = 0, devError_232_Serial_Port_Open_Error = 1, devError_lncp_Common_Micom_Error = 2, devError_lncp_Common_Running_Door_Open = 3, devError_lncp_Common_Hardware_Error = 4, devError_lncp_Common_Sensor_Error = 5, devError_lncp_Common_Motor_Error = 6, devError_lncp_Common_Power_Fail = 7, devError_lncp_Common_Temperature_Range_Error = 8, devError_lncp_Common_Device_Preempted_Error = 9, devError_lncp_Common_Device_control_timeout = 10, devError_lncp_Common_Device_Not_Exist_DD = 11, devError_lncp_Common_Device_Nak_Error = 12, devError_lncp_Common_Incorrect_Option_Setting = 13, devError_lncp_Common_Argument_Error = 14, devError_485_Serial_Port_Open_Error = 15, devError_TTL_Serial_Port_Open_Error = 16, devError_boiler_DisConnect = 17, devError_light_DisConnect = 18, devError_gas_DisConnect = 19, devError_door_DisConnect = 20, devError_outlet_DisConnect = 21, devError_curtain_DisConnect = 22, devError_airCleaner_DisConnect = 23, devError_bide_DisConnect = 24, devError_aroma_DisConnect = 25, devError_rf_DisConnect = 26, devError_plc_DisConnect = 27, devError_bundleLight_DisConnect = 28, devError_systemAircon_DisConnect = 29, devError_fanSystem_DisConnect = 30, devError_nokSungSensor_DisConnect = 31, devError_aircon_DisConnect = 32, devError_washMachine_DisConnect = 33, devError_dishWashMachine_DisConnect = 34, devError_gasOven_DisConnect = 35, devError_microwave_DisConnect = 36, devError_television_DisConnect = 37, devError_audio_DisConnect = 38, devError_vtr_DisConnect = 39, devError_refrigerator_DisConnect = 40, devError_kRefrigeator_DisConnect = 41, devError_Boiler_control = 42, devError_Boiler_drive = 43, devError_Boiler_boiler = 44, devError_Boiler_eeprom = 45, devGas_notFound_sensor = 46, devError_aroma_catridge1_drive = 47, devError_aroma_catridge2_drive = 48, devError_aroma_catridge3_drive = 49, devStatus_no = 50};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__enum_device_connect_check
#define SOAP_TYPE_cmxDeviceService_ns__enum_device_connect_check (8)
/* ns:enum-device-connect-check */
enum ns__enum_device_connect_check {_device_connect = 1, _not_device_disconnect = 2};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__enum_config_Common_Error
#define SOAP_TYPE_cmxDeviceService_ns__enum_config_Common_Error (9)
/* ns:enum-config-Common-Error */
enum ns__enum_config_Common_Error {_not_error = 0, _not_founded_file = 1, _not_founded_configuration_info = 2, _not_founded_mismatch_configuration = 3, _not_supported_function = 4, _supported_function = 5, _not_supported_device = 6, _device_support = 7, _not_response_control = 8, _not_device_use = 9};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__deviceCategoryFunc
#define SOAP_TYPE_cmxDeviceService_ns__deviceCategoryFunc (17)
/* ns:deviceCategoryFunc */
enum ns__deviceCategoryFunc {f_deviceCategory = 0, f_deviceCategoryDevError = 1};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__enum_boiler
#define SOAP_TYPE_cmxDeviceService_ns__enum_boiler (39)
/* ns:enum-boiler */
enum ns__enum_boiler {_boilerPower_Off = 0, _boilerPower_On = 1, _boilerHeating_Off = 2, _boilerHeating_On = 3, _boilerOutMode_Set = 4, _boilerOutMode_Release = 5, _boilerDipSwitchMode_Hypocaust = 6, _boilerDipSwitchMode_InnerTemperature = 7, _model_boiler_Rinnai = 8, _model_boiler_Kiturami = 9, _model_boiler_KyungDong = 10, _model_boiler_HansungCisco = 11, _model_boiler_HauWell = 12, _model_boiler_HanEnergy = 13, _model_boiler_Valcon = 14, _model_boiler_Kotech = 15};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__boilerFunc
#define SOAP_TYPE_cmxDeviceService_ns__boilerFunc (42)
/* ns:boilerFunc */
enum ns__boilerFunc {f_boilerPower = 0, f_boilerHeatingPower = 1, f_boilerOutMode = 2, f_boilerRequestedTemperature = 3, f_boilerCurrentTemperature = 4, f_boilerHeatingWaterTemperature = 5, f_boilerDevError = 6};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__enum_light
#define SOAP_TYPE_cmxDeviceService_ns__enum_light (65)
/* ns:enum-light */
enum ns__enum_light {_lightPower_Off = 0, _lightPower_On = 1, _lightPower_AllOff = 3, _lightPower_AllOn = 4, _lightSwitch_Binary = 5, _lightSwitch_Dimmable = 6, _model_Light_JoongAngControl = 5, _model_Light_Clio = 6, _model_Light_Anam = 7, _model_Light_GoIM = 8, _model_Light_PlanetInt = 9, _model_UnKnown = 10};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__lightFunc
#define SOAP_TYPE_cmxDeviceService_ns__lightFunc (68)
/* ns:lightFunc */
enum ns__lightFunc {f_lightPower = 0, f_dimmableLevel = 1, f_lightDevError = 2};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__enum_gasValve
#define SOAP_TYPE_cmxDeviceService_ns__enum_gasValve (91)
/* ns:enum-gasValve */
enum ns__enum_gasValve {_gvDo_Close = 0, _gvDo_Open = 1, _gvAlarm_On = 2, _gvAlarm_Off = 3, _model_GasValve_Shinwoo = 4, _model_GasValve_GoIM = 5, _model_GasValve_Mat = 6, _model_GasValve_koreaFire = 7};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__gasValveFunc
#define SOAP_TYPE_cmxDeviceService_ns__gasValveFunc (94)
/* ns:gasValveFunc */
enum ns__gasValveFunc {f_gvDo = 0, f_gvAlarm = 1, f_gvDevError = 2};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__enum_curtain
#define SOAP_TYPE_cmxDeviceService_ns__enum_curtain (117)
/* ns:enum-curtain */
enum ns__enum_curtain {_curtainDo_Close = 0, _curtainDo_Open = 1, _curtainDo_Stop = 2, _model_curtain_PlanetInt = 3, _model_curtain_CLIO = 4, _model_curtain_HaMun = 5};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__curtainFunc
#define SOAP_TYPE_cmxDeviceService_ns__curtainFunc (120)
/* ns:curtainFunc */
enum ns__curtainFunc {f_curtainDo = 0, f_curtainAngular = 1, f_curtainDevError = 2};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__enum_bundleLight
#define SOAP_TYPE_cmxDeviceService_ns__enum_bundleLight (143)
/* ns:enum-bundleLight */
enum ns__enum_bundleLight {_bundleLightPower_Off = 0, _bundleLightPower_On = 1, _bundleLightPower_AllOff = 2, _bundleLightPower_AllOn = 3, _readyEnergyPower_Off = 4, _readyEnergyPower_On = 5, _readyEnergyPower_AllOff = 6, _readyEnergyPower_AllOn = 7, _bundleLightExit_Notify = 8, _bundleLightExit_Entry_Accept = 9, _bundleLightExit_Entry_Deny = 10, _bundleLightExit_Setting = 11, _bundleLightExit_Release = 12, _bundleLightElevator_Up = 13, _bundleLightElevator_Down = 14, _bundleLightElevator_Fail = 15, _bundleLightElevator_Success = 16, _gasValve_Entry_Accept = 17, _gasValve_Entry_Deny = 18, _model_BundleLight_icom = 19, _model_BundleLight_Clio = 20, _model_BundleLight_Anam = 21, _model_BundleLight_Speel = 22};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__bundleLightFunc
#define SOAP_TYPE_cmxDeviceService_ns__bundleLightFunc (146)
/* ns:bundleLightFunc */
enum ns__bundleLightFunc {f_bundleLightPower = 0, f_bundleLightExit = 1, f_readyEnergyPower = 2, f_gasValve = 3, f_bundleLightElevator = 4, f_bundleLightDevError = 5};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__enum_systemAircon
#define SOAP_TYPE_cmxDeviceService_ns__enum_systemAircon (169)
/* ns:enum-systemAircon */
enum ns__enum_systemAircon {_systemAirconDo_Power_Off = 0, _systemAirconDo_Power_On = 1, _systemAirconDo_Power_AllOff = 2, _systemAirconDo_Power_AllOn = 3, _systemAirconDo_WindDirection_UpDown = 4, _systemAirconDo_WindDirection_LeftRight = 5, _systemAirconDo_WindDirection_UpDownLeftRight = 6, _systemAirconDo_WindDirection_Stop = 7, _systemAirconDo_Drive_Auto = 8, _systemAirconDo_Drive_Cooling = 9, _systemAirconDo_Drive_Humidity = 10, _systemAirconDo_Drive_Ventilation = 11, _systemAirconDo_Drive_Heating = 12, _systemAirconDo_WindPower_Auto = 13, _systemAirconDo_WindPower_Breeze = 14, _systemAirconDo_WindPower_Middle = 15, _systemAirconDo_WindPower_Super = 16, _systemAirconDo_WindPower_Natural = 17, _systemAirconDo_StatusQuery_Start = 18, _systemAirconDo_StatusQuery_Stop = 19, _systemAirconSt_Power_Start = 20, _systemAirconSt_Power_Stop = 21, _systemAirconSt_WindDirection_UpDown = 22, _systemAirconSt_WindDirection_LeftRight = 23, _systemAirconSt_WindDirection_UpDownLeftRight = 24, _systemAirconSt_WindDirection_Stop = 25, _systemAirconSt_WindPower_Auto = 26, _systemAirconSt_WindPower_Breeze = 27, _systemAirconSt_WindPower_Middle = 28, _systemAirconSt_WindPower_Super = 29, _systemAirconSt_WindPower_Natural = 30, _systemAirconSt_Drive_Driving = 31, _systemAirconSt_Drive_EventRelease = 32, _systemAirconSt_Drive_Auto = 33, _systemAirconSt_Drive_JaeSang = 34, _systemAirconSt_Drive_Ventilation = 35, _systemAirconSt_Drive_Humidity = 36, _systemAirconSt_Drive_Cooling = 37, _systemAirconSt_Drive_Heating = 38, _systemAirconSt_Tracking_Success = 39, _systemAirconSt_Tracking_Fail = 40, _systemAirconSt_Tracking_Searching = 41, _systemAirconSt_Tracking_End = 42, _systemAirconSt_Installation_Not_Exist = 43, _systemAirconSt_InnerRoom_Error_Normal = 44, _systemAirconSt_InnerRoom_Error_InnerTemperature = 45, _systemAirconSt_InnerRoom_Error_EVA_IN = 46, _systemAirconSt_InnerRoom_Error_FAN = 47, _systemAirconSt_InnerRoom_Error_Communication = 48, _systemAirconSt_InnerRoom_Error_Floating_Switch = 49, _systemAirconSt_InnerRoom_Error_Open_Two = 50, _systemAirconSt_InnerRoom_Error_EVA_OUT = 51, _systemAirconSt_OutRoom_Error_Normal = 52, _systemAirconSt_OutRoom_Error_Temp = 53, _systemAirconSt_OutRoom_Error_Sensor = 54, _systemAirconSt_OutRoom_Error_Cond = 55, _systemAirconSt_OutRoom_Error_Commnuication = 56, _systemAirconSt_OutRoom_Error_Error = 57, _systemAirconSt_OutRoom_Error_lowPower = 58, _systemAirconSt_OutRoom_Error_MagicalPower = 59, _systemAirconSt_OutRoom_Error_InitCommunication = 60, _model_systemAircon_SamSung = 61};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__systemAirconFunc
#define SOAP_TYPE_cmxDeviceService_ns__systemAirconFunc (172)
/* ns:systemAirconFunc */
enum ns__systemAirconFunc {f_systemAirconDo_Power = 0, f_systemAirconDo_WindDirection = 1, f_systemAirconDo_WindPower = 2, f_systemAirconDo_Temperature = 3, f_systemAirconDo_Drive = 4, f_systemAirconDo_StatusQuery = 5, f_systemAirconSt_Power = 6, f_systemAirconSt_WindDirection = 7, f_systemAirconSt_WindPower = 8, f_systemAirconSt_Temperature_Set = 9, f_systemAirconSt_Temperature_Current = 10, f_systemAirconSt_Drive = 11, f_systemAirconSt_Tracking = 12, f_systemAirconSt_InnerRoom_Error = 13, f_systemAirconSt_OutRoom_Error = 14, f_systemAirconSt_Installation = 15, f_systemAirconDevError = 16};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__enum_fanSystem
#define SOAP_TYPE_cmxDeviceService_ns__enum_fanSystem (195)
/* ns:enum-fanSystem */
enum ns__enum_fanSystem {_fanSystemDo_Power_Off = 0, _fanSystemDo_Power_On = 1, _fanSystemDo_AutoFan_ElectricHeat = 2, _fanSystemDo_AutoFan_GeneralFan = 3, _fanSystemDo_FanMode_ElectricHeat = 4, _fanSystemDo_FanMode_GeneralFan = 5, _fanSystemDo_FanMode_Schedule = 6, _fanSystemDo_FanMode_SleepingMode = 7, _fanSystemDo_Wind_Off = 8, _fanSystemDo_Wind_Low = 9, _fanSystemDo_Wind_Middle = 10, _fanSystemDo_Wind_High = 11, _fanSystemDo_ReservationSet_Set = 12, _fanSystemDo_ReservationSet_Release = 13, _fanSystemDo_ReservationSet_Running = 14, _fanSystemDo_ReservationSet_NotRunning = 15, _fanSystemSt_Power_Off = 16, _fanSystemSt_Power_On = 17, _fanSystemSt_AutoFan_ElectricHeat = 18, _fanSystemSt_AutoFan_GeneralFan = 19, _fanSystemSt_CurrentFanMode_AutoFan = 20, _fanSystemSt_FanMode_ElectricHeat = 21, _fanSystemSt_FanMode_GeneralFan = 22, _fanSystemSt_FanMode_Schedule = 23, _fanSystemSt_FanMode_SleepingMode = 24, _fanSystemSt_CurrentFanMode_Manual = 25, _fanSystemSt_Wind_Off = 26, _fanSystemSt_Wind_Low = 27, _fanSystemSt_Wind_Middle = 28, _fanSystemSt_Wind_High = 29, _fanSystemSt_FanReservationSetMode_Hour = 30, _fanSystemSt_FanReservationSetMode_Minute = 31, _fanSystemSt_ReservationSet_Set = 32, _fanSystemSt_ReservationSet_Release = 33, _fanSystemSt_ReservationSet_Running = 34, _fanSystemSt_ReservationSet_NotRunning = 35, _fanSystemSt_SensorMode_NotExistSenosr = 36, _fanSystemSt_SensorMode_GasSenosr = 37, _fanSystemSt_SensorMode_CO2Senosr = 38, _fanSystemSt_DamperMode_NotExist = 39, _fanSystemSt_DamperMode_Exist = 40, _fanSystemSt_FilterEmpressMode_Normal = 41, _fanSystemSt_FilterEmpressMode_Clean = 42, _fanSystemSt_FilterEmpressMode_Change = 43, _fanSystemSt_FilterEmpressMode_FEChange = 44, _fanSystemSt_AlarmMode_Normal = 45, _fanSystemSt_AlarmMode_HighSpeedMotor = 46, _fanSystemSt_AlarmMode_VentilationMotor = 47, _fanSystemSt_AlarmMode_DamperMotor = 48, _fanSystemSt_AlarmMode_CO2 = 49, _fanSystemSt_AlarmMode_TemperatureMotor = 50, _fanSystemSt_AlarmMode_OverHeating = 51, _fanSystemSt_AlarmMode_DeviceProtect = 52, _fanSystemSt_CO2_DensityMode_CO2High = 53, _fanSystemSt_CO2_DensityMode_CO2Low = 54, _fanSystemSt_GAS_Density_Low = 55, _fanSystemSt_GAS_Density_Middle = 56, _fanSystemSt_GAS_Density_High = 57, _model_fanSystem_KoKomTech = 58};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__fanSystemFunc
#define SOAP_TYPE_cmxDeviceService_ns__fanSystemFunc (198)
/* ns:fanSystemFunc */
enum ns__fanSystemFunc {f_fanSystemDo_Power = 0, f_fanSystemDo_AutoFan = 1, f_fanSystemDo_FanMode = 2, f_fanSystemDo_FanWind = 3, f_fanSystemDo_FanReservationSet = 4, f_fanSystemSt_Power = 5, f_fanSystemSt_AutoFan = 6, f_fanSystemSt_FanMode = 7, f_fanSystemSt_FanWind = 8, f_fanSystemSt_FanReservationSet = 9, f_fanSystemSt_SensorMode = 10, f_fanSystemSt_DamperMode = 11, f_fanSystemSt_FilterEmpress = 12, f_fanSystemSt_AlarmMode = 13, f_fanSystemSt_Temperature = 14, f_fanSystemSt_CO2_Density = 15, f_fanSystemSt_GAS_Density = 16, f_fanSystemDevError = 17};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__enum_securitySensor
#define SOAP_TYPE_cmxDeviceService_ns__enum_securitySensor (221)
/* ns:enum-securitySensor */
enum ns__enum_securitySensor {_securitySensorSt_Detected = 0, _securitySensorSt_UnDetected = 1, _model_NokSung_XP830RS8I = 2};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__securitySensorFunc
#define SOAP_TYPE_cmxDeviceService_ns__securitySensorFunc (224)
/* ns:securitySensorFunc */
enum ns__securitySensorFunc {f_securitySensorStSubChannelOne = 0, f_securitySensorStSubChannelTwo = 1, f_securitySensorStSubChannelThree = 2, f_securitySensorStSubChannelFour = 3, f_securitySensorStSubChannelFive = 4, f_securitySensorStSubChannelSix = 5, f_securitySensorStSubChannelSeven = 6, f_securitySensorStSubChannelEight = 7, f_securitySensorDevError = 8};
#endif

/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_cmxDeviceService_xsd__base64Binary
#define SOAP_TYPE_cmxDeviceService_xsd__base64Binary (10)
/* Base64 schema type: */
struct xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__rootDevice
#define SOAP_TYPE_cmxDeviceService_ns__rootDevice (14)
/* ns:rootDevice */
class SOAP_CMAC ns__rootDevice
{
public:
	enum ns__enum_devInfo dev;	/* required element of type ns:enum-devInfo */
	enum ns__enum_devInfo proto;	/* required element of type ns:enum-devInfo */
	enum ns__enum_devInfo intf;	/* required element of type ns:enum-devInfo */
	unsigned int order;	/* required element of type xsd:unsignedInt */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__rootDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__rootDevice()  { }
	virtual ~ns__rootDevice() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_xsd_devCategory
#define SOAP_TYPE_cmxDeviceService_xsd_devCategory (15)
/* xsd-devCategory */
struct xsd_devCategory
{
public:
	unsigned int _boiler;	/* required element of type xsd:unsignedInt */
	unsigned int _light;	/* required element of type xsd:unsignedInt */
	unsigned int _gasValve;	/* required element of type xsd:unsignedInt */
	unsigned int _doorLock;	/* required element of type xsd:unsignedInt */
	unsigned int _outlet;	/* required element of type xsd:unsignedInt */
	unsigned int _curtain;	/* required element of type xsd:unsignedInt */
	unsigned int _aroma;	/* required element of type xsd:unsignedInt */
	unsigned int _airCleaner;	/* required element of type xsd:unsignedInt */
	unsigned int _bide;	/* required element of type xsd:unsignedInt */
	unsigned int _rf;	/* required element of type xsd:unsignedInt */
	unsigned int _plc;	/* required element of type xsd:unsignedInt */
	unsigned int _bundleLight;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAircon;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystem;	/* required element of type xsd:unsignedInt */
	unsigned int _aircon;	/* required element of type xsd:unsignedInt */
	unsigned int _washMachine;	/* required element of type xsd:unsignedInt */
	unsigned int _dishWashMachine;	/* required element of type xsd:unsignedInt */
	unsigned int _gasOven;	/* required element of type xsd:unsignedInt */
	unsigned int _microwave;	/* required element of type xsd:unsignedInt */
	unsigned int _television;	/* required element of type xsd:unsignedInt */
	unsigned int _audio;	/* required element of type xsd:unsignedInt */
	unsigned int _vtr;	/* required element of type xsd:unsignedInt */
	unsigned int _dvd;	/* required element of type xsd:unsignedInt */
	unsigned int _refrigerator;	/* required element of type xsd:unsignedInt */
	unsigned int _kRefrigeator;	/* required element of type xsd:unsignedInt */
	unsigned int _securitySensor;	/* required element of type xsd:unsignedInt */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__deviceCategory
#define SOAP_TYPE_cmxDeviceService_ns__deviceCategory (16)
/* ns:deviceCategory */
class SOAP_CMAC ns__deviceCategory
{
public:
	struct xsd_devCategory enable_device_category;	/* required element of type xsd-devCategory */
	enum ns__enum_config_Common_Error commonError;	/* required element of type ns:enum-config-Common-Error */
	enum ns__enum_devError boilerDeviceError;	/* required element of type ns:enum-devError */
	enum ns__enum_devError lightDeviceError;	/* required element of type ns:enum-devError */
	enum ns__enum_devError gasDeviceError;	/* required element of type ns:enum-devError */
	enum ns__enum_devError doorLockDeviceError;	/* required element of type ns:enum-devError */
	enum ns__enum_devError acConsentDeviceError;	/* required element of type ns:enum-devError */
	enum ns__enum_devError curtainDeviceError;	/* required element of type ns:enum-devError */
	enum ns__enum_devError bundleLightDeviceError;	/* required element of type ns:enum-devError */
	enum ns__enum_devError fanSystemDeviceError;	/* required element of type ns:enum-devError */
	enum ns__enum_devError securitySensorDeviceError;	/* required element of type ns:enum-devError */
	enum ns__enum_devError airconDeviceError;	/* required element of type ns:enum-devError */
	enum ns__enum_devError rfDeviceError;	/* required element of type ns:enum-devError */
	enum ns__enum_devError systemAirconDeviceError;	/* required element of type ns:enum-devError */
	enum ns__enum_device_connect_check deviceConnectionCheck;	/* required element of type ns:enum-device-connect-check */
	enum ns__deviceCategoryFunc func;	/* required element of type ns:deviceCategoryFunc */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__deviceCategory */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__deviceCategory()  { }
	virtual ~ns__deviceCategory() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getDeviceCategoryItemResponse
#define SOAP_TYPE_cmxDeviceService_ns__getDeviceCategoryItemResponse (18)
/* ns:getDeviceCategoryItemResponse */
class SOAP_CMAC ns__getDeviceCategoryItemResponse
{
public:
	ns__deviceCategory _return;	/* RPC return element */	/* required element of type ns:deviceCategory */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getDeviceCategoryItemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getDeviceCategoryItemResponse()  { }
	virtual ~ns__getDeviceCategoryItemResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getDeviceCategoryResponse
#define SOAP_TYPE_cmxDeviceService_ns__getDeviceCategoryResponse (19)
/* ns:getDeviceCategoryResponse */
class SOAP_CMAC ns__getDeviceCategoryResponse
{
public:
	ns__deviceCategory _return;	/* RPC return element */	/* required element of type ns:deviceCategory */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getDeviceCategoryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getDeviceCategoryResponse()  { }
	virtual ~ns__getDeviceCategoryResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getDeviceCategoryCountResponse
#define SOAP_TYPE_cmxDeviceService_ns__getDeviceCategoryCountResponse (24)
/* ns:getDeviceCategoryCountResponse */
struct ns__getDeviceCategoryCountResponse
{
public:
	int *out;	/* RPC return element */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getDeviceCategoryCount
#define SOAP_TYPE_cmxDeviceService_ns__getDeviceCategoryCount (25)
/* ns:getDeviceCategoryCount */
struct ns__getDeviceCategoryCount
{
public:
	void *_;	/* transient */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getDeviceCategoryItem
#define SOAP_TYPE_cmxDeviceService_ns__getDeviceCategoryItem (28)
/* ns:getDeviceCategoryItem */
struct ns__getDeviceCategoryItem
{
public:
	int order;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getDeviceCategory
#define SOAP_TYPE_cmxDeviceService_ns__getDeviceCategory (31)
/* ns:getDeviceCategory */
struct ns__getDeviceCategory
{
public:
	ns__deviceCategory in;	/* required element of type ns:deviceCategory */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__setDeviceCategoryResponse
#define SOAP_TYPE_cmxDeviceService_ns__setDeviceCategoryResponse (32)
/* ns:setDeviceCategoryResponse */
class SOAP_CMAC ns__setDeviceCategoryResponse
{
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__setDeviceCategoryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__setDeviceCategoryResponse()  { }
	virtual ~ns__setDeviceCategoryResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__setDeviceCategory
#define SOAP_TYPE_cmxDeviceService_ns__setDeviceCategory (35)
/* ns:setDeviceCategory */
struct ns__setDeviceCategory
{
public:
	ns__deviceCategory in;	/* required element of type ns:deviceCategory */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__deviceCategoryEventResponse
#define SOAP_TYPE_cmxDeviceService_ns__deviceCategoryEventResponse (37)
/* ns:deviceCategoryEventResponse */
struct ns__deviceCategoryEventResponse
{
public:
	int *out;	/* RPC return element */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__deviceCategoryEvent
#define SOAP_TYPE_cmxDeviceService_ns__deviceCategoryEvent (38)
/* ns:deviceCategoryEvent */
struct ns__deviceCategoryEvent
{
public:
	ns__deviceCategory in;	/* required element of type ns:deviceCategory */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_xsd_BoilerProperty
#define SOAP_TYPE_cmxDeviceService_xsd_BoilerProperty (40)
/* xsd-BoilerProperty */
struct xsd_BoilerProperty
{
public:
	unsigned int _indivisualBoiler;	/* required element of type xsd:unsignedInt */
	unsigned int _eachBoiler;	/* required element of type xsd:unsignedInt */
	unsigned int _boilerPower_Off;	/* required element of type xsd:unsignedInt */
	unsigned int _boilerPower_On;	/* required element of type xsd:unsignedInt */
	unsigned int _boilerHeatingPower_Off;	/* required element of type xsd:unsignedInt */
	unsigned int _boilerHeatingPower_On;	/* required element of type xsd:unsignedInt */
	unsigned int _boilerOutMode_Set;	/* required element of type xsd:unsignedInt */
	unsigned int _boilerOutMode_Release;	/* required element of type xsd:unsignedInt */
	unsigned int _boilerDipSwitchMode_Hypocaust;	/* required element of type xsd:unsignedInt */
	unsigned int _boilerDipSwitchMode_InnerTemperature;	/* required element of type xsd:unsignedInt */
	unsigned int boilerRequestedTemperature;	/* required element of type xsd:unsignedInt */
	unsigned int boilerRequestedTemperatureFrom;	/* sequence of 1 to 7 elements of type xsd:unsignedInt */
	unsigned int boilerRequestedTemperatureTo;	/* sequence of 1 to 7 elements of type xsd:unsignedInt */
	unsigned int boilerCurrentTemperature;	/* required element of type xsd:unsignedInt */
	unsigned int boilerCurrentTemperatureFrom;	/* sequence of 1 to 7 elements of type xsd:unsignedInt */
	unsigned int boilerCurrentTemperatureTo;	/* sequence of 1 to 7 elements of type xsd:unsignedInt */
	unsigned int boilerHeatingWaterTemperature;	/* required element of type xsd:unsignedInt */
	unsigned int boilerHeatingWaterTemperatureFrom;	/* sequence of 1 to 7 elements of type xsd:unsignedInt */
	unsigned int boilerHeatingWaterTemperatureTo;	/* sequence of 1 to 7 elements of type xsd:unsignedInt */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__boiler
#define SOAP_TYPE_cmxDeviceService_ns__boiler (41)
/* ns:boiler */
class SOAP_CMAC ns__boiler : public ns__rootDevice
{
public:
	struct xsd_BoilerProperty devBoilerProperty;	/* required element of type xsd-BoilerProperty */
	char *boilerZoneName;	/* optional element of type xsd:string */
	int boilerRequestedTemperature;	/* required element of type xsd:int */
	int boilerCurrentTemperature;	/* required element of type xsd:int */
	int boilerHeatingWaterTemperature;	/* required element of type xsd:int */
	enum ns__enum_boiler model;	/* required element of type ns:enum-boiler */
	enum ns__enum_boiler boilerPower;	/* required element of type ns:enum-boiler */
	enum ns__enum_boiler boilerHeatingPower;	/* required element of type ns:enum-boiler */
	enum ns__enum_boiler boilerOutMode;	/* required element of type ns:enum-boiler */
	enum ns__enum_boiler boilerDipSwitchMode;	/* required element of type ns:enum-boiler */
	enum ns__enum_devError boilerDevError;	/* required element of type ns:enum-devError */
	enum ns__boilerFunc func;	/* required element of type ns:boilerFunc */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__boiler */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__boiler() : boilerZoneName(NULL) { }
	virtual ~ns__boiler() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getBoilerPropertyItemResponse
#define SOAP_TYPE_cmxDeviceService_ns__getBoilerPropertyItemResponse (43)
/* ns:getBoilerPropertyItemResponse */
class SOAP_CMAC ns__getBoilerPropertyItemResponse
{
public:
	ns__boiler _return;	/* RPC return element */	/* required element of type ns:boiler */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getBoilerPropertyItemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getBoilerPropertyItemResponse()  { }
	virtual ~ns__getBoilerPropertyItemResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getBoilerItemResponse
#define SOAP_TYPE_cmxDeviceService_ns__getBoilerItemResponse (44)
/* ns:getBoilerItemResponse */
class SOAP_CMAC ns__getBoilerItemResponse
{
public:
	ns__boiler _return;	/* RPC return element */	/* required element of type ns:boiler */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getBoilerItemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getBoilerItemResponse()  { }
	virtual ~ns__getBoilerItemResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getBoilerResponse
#define SOAP_TYPE_cmxDeviceService_ns__getBoilerResponse (45)
/* ns:getBoilerResponse */
class SOAP_CMAC ns__getBoilerResponse
{
public:
	ns__boiler _return;	/* RPC return element */	/* required element of type ns:boiler */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getBoilerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getBoilerResponse()  { }
	virtual ~ns__getBoilerResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getBoilerCountResponse
#define SOAP_TYPE_cmxDeviceService_ns__getBoilerCountResponse (47)
/* ns:getBoilerCountResponse */
struct ns__getBoilerCountResponse
{
public:
	int *out;	/* RPC return element */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getBoilerCount
#define SOAP_TYPE_cmxDeviceService_ns__getBoilerCount (48)
/* ns:getBoilerCount */
struct ns__getBoilerCount
{
public:
	void *_;	/* transient */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getBoilerPropertyItem
#define SOAP_TYPE_cmxDeviceService_ns__getBoilerPropertyItem (51)
/* ns:getBoilerPropertyItem */
struct ns__getBoilerPropertyItem
{
public:
	int order;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getBoilerItem
#define SOAP_TYPE_cmxDeviceService_ns__getBoilerItem (54)
/* ns:getBoilerItem */
struct ns__getBoilerItem
{
public:
	int order;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getBoiler
#define SOAP_TYPE_cmxDeviceService_ns__getBoiler (57)
/* ns:getBoiler */
struct ns__getBoiler
{
public:
	ns__boiler in;	/* required element of type ns:boiler */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__setBoilerResponse
#define SOAP_TYPE_cmxDeviceService_ns__setBoilerResponse (58)
/* ns:setBoilerResponse */
class SOAP_CMAC ns__setBoilerResponse
{
public:
	virtual int soap_type() const { return 58; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__setBoilerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__setBoilerResponse()  { }
	virtual ~ns__setBoilerResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__setBoiler
#define SOAP_TYPE_cmxDeviceService_ns__setBoiler (61)
/* ns:setBoiler */
struct ns__setBoiler
{
public:
	ns__boiler in;	/* required element of type ns:boiler */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__boilerEventResponse
#define SOAP_TYPE_cmxDeviceService_ns__boilerEventResponse (63)
/* ns:boilerEventResponse */
struct ns__boilerEventResponse
{
public:
	int *out;	/* RPC return element */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__boilerEvent
#define SOAP_TYPE_cmxDeviceService_ns__boilerEvent (64)
/* ns:boilerEvent */
struct ns__boilerEvent
{
public:
	ns__boiler in;	/* required element of type ns:boiler */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_xsd_LightProperty
#define SOAP_TYPE_cmxDeviceService_xsd_LightProperty (66)
/* xsd-LightProperty */
struct xsd_LightProperty
{
public:
	unsigned int _lightBinary;	/* required element of type xsd:unsignedInt */
	unsigned int _lightDimmable;	/* required element of type xsd:unsignedInt */
	unsigned int _lightPower_Off;	/* required element of type xsd:unsignedInt */
	unsigned int _lightPower_On;	/* required element of type xsd:unsignedInt */
	unsigned int _lightPower_AllOff;	/* required element of type xsd:unsignedInt */
	unsigned int _lightPower_AllOn;	/* required element of type xsd:unsignedInt */
	unsigned int dimmerLevelFrom;	/* sequence of 1 to 4 elements of type xsd:unsignedInt */
	unsigned int dimmerLevelTo;	/* sequence of 1 to 4 elements of type xsd:unsignedInt */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__light
#define SOAP_TYPE_cmxDeviceService_ns__light (67)
/* ns:light */
class SOAP_CMAC ns__light : public ns__rootDevice
{
public:
	struct xsd_LightProperty devLightProperty;	/* required element of type xsd-LightProperty */
	char *lightZoneMainName;	/* optional element of type xsd:string */
	char *lightZoneSubName;	/* optional element of type xsd:string */
	int dimmableLevel;	/* required element of type xsd:int */
	enum ns__enum_light model;	/* required element of type ns:enum-light */
	enum ns__enum_light lightPower;	/* required element of type ns:enum-light */
	enum ns__enum_light lightSwitchMode;	/* required element of type ns:enum-light */
	enum ns__enum_devError lightDevError;	/* required element of type ns:enum-devError */
	enum ns__lightFunc func;	/* required element of type ns:lightFunc */
public:
	virtual int soap_type() const { return 67; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__light */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__light() : lightZoneMainName(NULL), lightZoneSubName(NULL) { }
	virtual ~ns__light() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getLightPropertyItemResponse
#define SOAP_TYPE_cmxDeviceService_ns__getLightPropertyItemResponse (69)
/* ns:getLightPropertyItemResponse */
class SOAP_CMAC ns__getLightPropertyItemResponse
{
public:
	ns__light _return;	/* RPC return element */	/* required element of type ns:light */
public:
	virtual int soap_type() const { return 69; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getLightPropertyItemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getLightPropertyItemResponse()  { }
	virtual ~ns__getLightPropertyItemResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getLightItemResponse
#define SOAP_TYPE_cmxDeviceService_ns__getLightItemResponse (70)
/* ns:getLightItemResponse */
class SOAP_CMAC ns__getLightItemResponse
{
public:
	ns__light _return;	/* RPC return element */	/* required element of type ns:light */
public:
	virtual int soap_type() const { return 70; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getLightItemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getLightItemResponse()  { }
	virtual ~ns__getLightItemResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getLightResponse
#define SOAP_TYPE_cmxDeviceService_ns__getLightResponse (71)
/* ns:getLightResponse */
class SOAP_CMAC ns__getLightResponse
{
public:
	ns__light _return;	/* RPC return element */	/* required element of type ns:light */
public:
	virtual int soap_type() const { return 71; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getLightResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getLightResponse()  { }
	virtual ~ns__getLightResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getLightCountResponse
#define SOAP_TYPE_cmxDeviceService_ns__getLightCountResponse (73)
/* ns:getLightCountResponse */
struct ns__getLightCountResponse
{
public:
	int *out;	/* RPC return element */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getLightCount
#define SOAP_TYPE_cmxDeviceService_ns__getLightCount (74)
/* ns:getLightCount */
struct ns__getLightCount
{
public:
	void *_;	/* transient */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getLightPropertyItem
#define SOAP_TYPE_cmxDeviceService_ns__getLightPropertyItem (77)
/* ns:getLightPropertyItem */
struct ns__getLightPropertyItem
{
public:
	int order;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getLightItem
#define SOAP_TYPE_cmxDeviceService_ns__getLightItem (80)
/* ns:getLightItem */
struct ns__getLightItem
{
public:
	int order;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getLight
#define SOAP_TYPE_cmxDeviceService_ns__getLight (83)
/* ns:getLight */
struct ns__getLight
{
public:
	ns__light in;	/* required element of type ns:light */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__setLightResponse
#define SOAP_TYPE_cmxDeviceService_ns__setLightResponse (84)
/* ns:setLightResponse */
class SOAP_CMAC ns__setLightResponse
{
public:
	virtual int soap_type() const { return 84; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__setLightResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__setLightResponse()  { }
	virtual ~ns__setLightResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__setLight
#define SOAP_TYPE_cmxDeviceService_ns__setLight (87)
/* ns:setLight */
struct ns__setLight
{
public:
	ns__light in;	/* required element of type ns:light */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__lightEventResponse
#define SOAP_TYPE_cmxDeviceService_ns__lightEventResponse (89)
/* ns:lightEventResponse */
struct ns__lightEventResponse
{
public:
	int *out;	/* RPC return element */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__lightEvent
#define SOAP_TYPE_cmxDeviceService_ns__lightEvent (90)
/* ns:lightEvent */
struct ns__lightEvent
{
public:
	ns__light in;	/* required element of type ns:light */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_xsd_gasValveProperty
#define SOAP_TYPE_cmxDeviceService_xsd_gasValveProperty (92)
/* xsd-gasValveProperty */
struct xsd_gasValveProperty
{
public:
	unsigned int _gvDo_Close;	/* required element of type xsd:unsignedInt */
	unsigned int _gvDo_Open;	/* required element of type xsd:unsignedInt */
	unsigned int _gvAlarm_On;	/* required element of type xsd:unsignedInt */
	unsigned int _gvAlarm_Off;	/* required element of type xsd:unsignedInt */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__gasValve
#define SOAP_TYPE_cmxDeviceService_ns__gasValve (93)
/* ns:gasValve */
class SOAP_CMAC ns__gasValve : public ns__rootDevice
{
public:
	struct xsd_gasValveProperty devGasValveProperty;	/* required element of type xsd-gasValveProperty */
	enum ns__enum_gasValve model;	/* required element of type ns:enum-gasValve */
	enum ns__enum_gasValve gvDo;	/* required element of type ns:enum-gasValve */
	enum ns__enum_gasValve gvAlarm;	/* required element of type ns:enum-gasValve */
	enum ns__enum_devError gvDevError;	/* required element of type ns:enum-devError */
	enum ns__gasValveFunc func;	/* required element of type ns:gasValveFunc */
public:
	virtual int soap_type() const { return 93; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__gasValve */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__gasValve()  { }
	virtual ~ns__gasValve() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getGasValvePropertyItemResponse
#define SOAP_TYPE_cmxDeviceService_ns__getGasValvePropertyItemResponse (95)
/* ns:getGasValvePropertyItemResponse */
class SOAP_CMAC ns__getGasValvePropertyItemResponse
{
public:
	ns__gasValve _return;	/* RPC return element */	/* required element of type ns:gasValve */
public:
	virtual int soap_type() const { return 95; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getGasValvePropertyItemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getGasValvePropertyItemResponse()  { }
	virtual ~ns__getGasValvePropertyItemResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getGasValveItemResponse
#define SOAP_TYPE_cmxDeviceService_ns__getGasValveItemResponse (96)
/* ns:getGasValveItemResponse */
class SOAP_CMAC ns__getGasValveItemResponse
{
public:
	ns__gasValve _return;	/* RPC return element */	/* required element of type ns:gasValve */
public:
	virtual int soap_type() const { return 96; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getGasValveItemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getGasValveItemResponse()  { }
	virtual ~ns__getGasValveItemResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getGasValveResponse
#define SOAP_TYPE_cmxDeviceService_ns__getGasValveResponse (97)
/* ns:getGasValveResponse */
class SOAP_CMAC ns__getGasValveResponse
{
public:
	ns__gasValve _return;	/* RPC return element */	/* required element of type ns:gasValve */
public:
	virtual int soap_type() const { return 97; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getGasValveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getGasValveResponse()  { }
	virtual ~ns__getGasValveResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getGasValveCountResponse
#define SOAP_TYPE_cmxDeviceService_ns__getGasValveCountResponse (99)
/* ns:getGasValveCountResponse */
struct ns__getGasValveCountResponse
{
public:
	int *out;	/* RPC return element */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getGasValveCount
#define SOAP_TYPE_cmxDeviceService_ns__getGasValveCount (100)
/* ns:getGasValveCount */
struct ns__getGasValveCount
{
public:
	void *_;	/* transient */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getGasValvePropertyItem
#define SOAP_TYPE_cmxDeviceService_ns__getGasValvePropertyItem (103)
/* ns:getGasValvePropertyItem */
struct ns__getGasValvePropertyItem
{
public:
	int order;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getGasValveItem
#define SOAP_TYPE_cmxDeviceService_ns__getGasValveItem (106)
/* ns:getGasValveItem */
struct ns__getGasValveItem
{
public:
	int order;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getGasValve
#define SOAP_TYPE_cmxDeviceService_ns__getGasValve (109)
/* ns:getGasValve */
struct ns__getGasValve
{
public:
	ns__gasValve in;	/* required element of type ns:gasValve */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__setGasValveResponse
#define SOAP_TYPE_cmxDeviceService_ns__setGasValveResponse (110)
/* ns:setGasValveResponse */
class SOAP_CMAC ns__setGasValveResponse
{
public:
	virtual int soap_type() const { return 110; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__setGasValveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__setGasValveResponse()  { }
	virtual ~ns__setGasValveResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__setGasValve
#define SOAP_TYPE_cmxDeviceService_ns__setGasValve (113)
/* ns:setGasValve */
struct ns__setGasValve
{
public:
	ns__gasValve in;	/* required element of type ns:gasValve */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__gasValveEventResponse
#define SOAP_TYPE_cmxDeviceService_ns__gasValveEventResponse (115)
/* ns:gasValveEventResponse */
struct ns__gasValveEventResponse
{
public:
	int *out;	/* RPC return element */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__gasValveEvent
#define SOAP_TYPE_cmxDeviceService_ns__gasValveEvent (116)
/* ns:gasValveEvent */
struct ns__gasValveEvent
{
public:
	ns__gasValve in;	/* required element of type ns:gasValve */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_xsd_curtainProperty
#define SOAP_TYPE_cmxDeviceService_xsd_curtainProperty (118)
/* xsd-curtainProperty */
struct xsd_curtainProperty
{
public:
	unsigned int _curtainDo_Close;	/* required element of type xsd:unsignedInt */
	unsigned int _curtainDo_Open;	/* required element of type xsd:unsignedInt */
	unsigned int _curtainDo_Stop;	/* required element of type xsd:unsignedInt */
	unsigned int _curtainAngular;	/* sequence of 1 to 9 elements of type xsd:unsignedInt */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__curtain
#define SOAP_TYPE_cmxDeviceService_ns__curtain (119)
/* ns:curtain */
class SOAP_CMAC ns__curtain : public ns__rootDevice
{
public:
	struct xsd_curtainProperty devCurtainProperty;	/* required element of type xsd-curtainProperty */
	enum ns__enum_curtain model;	/* required element of type ns:enum-curtain */
	enum ns__enum_curtain curtainDo;	/* required element of type ns:enum-curtain */
	enum ns__enum_devError curtainDevError;	/* required element of type ns:enum-devError */
	int curtainAngular;	/* required element of type xsd:int */
	enum ns__curtainFunc func;	/* required element of type ns:curtainFunc */
public:
	virtual int soap_type() const { return 119; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__curtain */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__curtain()  { }
	virtual ~ns__curtain() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getCurtainPropertyItemResponse
#define SOAP_TYPE_cmxDeviceService_ns__getCurtainPropertyItemResponse (121)
/* ns:getCurtainPropertyItemResponse */
class SOAP_CMAC ns__getCurtainPropertyItemResponse
{
public:
	ns__curtain _return;	/* RPC return element */	/* required element of type ns:curtain */
public:
	virtual int soap_type() const { return 121; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getCurtainPropertyItemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getCurtainPropertyItemResponse()  { }
	virtual ~ns__getCurtainPropertyItemResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getCurtainItemResponse
#define SOAP_TYPE_cmxDeviceService_ns__getCurtainItemResponse (122)
/* ns:getCurtainItemResponse */
class SOAP_CMAC ns__getCurtainItemResponse
{
public:
	ns__curtain _return;	/* RPC return element */	/* required element of type ns:curtain */
public:
	virtual int soap_type() const { return 122; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getCurtainItemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getCurtainItemResponse()  { }
	virtual ~ns__getCurtainItemResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getCurtainResponse
#define SOAP_TYPE_cmxDeviceService_ns__getCurtainResponse (123)
/* ns:getCurtainResponse */
class SOAP_CMAC ns__getCurtainResponse
{
public:
	ns__curtain _return;	/* RPC return element */	/* required element of type ns:curtain */
public:
	virtual int soap_type() const { return 123; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getCurtainResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getCurtainResponse()  { }
	virtual ~ns__getCurtainResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getCurtainCountResponse
#define SOAP_TYPE_cmxDeviceService_ns__getCurtainCountResponse (125)
/* ns:getCurtainCountResponse */
struct ns__getCurtainCountResponse
{
public:
	int *out;	/* RPC return element */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getCurtainCount
#define SOAP_TYPE_cmxDeviceService_ns__getCurtainCount (126)
/* ns:getCurtainCount */
struct ns__getCurtainCount
{
public:
	void *_;	/* transient */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getCurtainPropertyItem
#define SOAP_TYPE_cmxDeviceService_ns__getCurtainPropertyItem (129)
/* ns:getCurtainPropertyItem */
struct ns__getCurtainPropertyItem
{
public:
	int order;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getCurtainItem
#define SOAP_TYPE_cmxDeviceService_ns__getCurtainItem (132)
/* ns:getCurtainItem */
struct ns__getCurtainItem
{
public:
	int order;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getCurtain
#define SOAP_TYPE_cmxDeviceService_ns__getCurtain (135)
/* ns:getCurtain */
struct ns__getCurtain
{
public:
	ns__curtain in;	/* required element of type ns:curtain */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__setCurtainResponse
#define SOAP_TYPE_cmxDeviceService_ns__setCurtainResponse (136)
/* ns:setCurtainResponse */
class SOAP_CMAC ns__setCurtainResponse
{
public:
	virtual int soap_type() const { return 136; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__setCurtainResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__setCurtainResponse()  { }
	virtual ~ns__setCurtainResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__setCurtain
#define SOAP_TYPE_cmxDeviceService_ns__setCurtain (139)
/* ns:setCurtain */
struct ns__setCurtain
{
public:
	ns__curtain in;	/* required element of type ns:curtain */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__curtainEventResponse
#define SOAP_TYPE_cmxDeviceService_ns__curtainEventResponse (141)
/* ns:curtainEventResponse */
struct ns__curtainEventResponse
{
public:
	int *out;	/* RPC return element */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__curtainEvent
#define SOAP_TYPE_cmxDeviceService_ns__curtainEvent (142)
/* ns:curtainEvent */
struct ns__curtainEvent
{
public:
	ns__curtain in;	/* required element of type ns:curtain */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_xsd_bundleLightProperty
#define SOAP_TYPE_cmxDeviceService_xsd_bundleLightProperty (144)
/* xsd-bundleLightProperty */
struct xsd_bundleLightProperty
{
public:
	unsigned int _bundleLightPower_Off;	/* required element of type xsd:unsignedInt */
	unsigned int _bundleLightPower_On;	/* required element of type xsd:unsignedInt */
	unsigned int _bundleLightPower_AllOff;	/* required element of type xsd:unsignedInt */
	unsigned int _bundleLightPower_AllOn;	/* required element of type xsd:unsignedInt */
	unsigned int _readyEnergyPower_Off;	/* required element of type xsd:unsignedInt */
	unsigned int _readyEnergyPower_On;	/* required element of type xsd:unsignedInt */
	unsigned int _readyEnergyPower_AllOff;	/* required element of type xsd:unsignedInt */
	unsigned int _readyEnergyPower_AllOn;	/* required element of type xsd:unsignedInt */
	unsigned int _bundleLightExit_Notify;	/* required element of type xsd:unsignedInt */
	unsigned int _bundleLightExit_Entry_Accept;	/* required element of type xsd:unsignedInt */
	unsigned int _bundleLightExit_Entry_Deny;	/* required element of type xsd:unsignedInt */
	unsigned int _bundleLightExit_Setting;	/* required element of type xsd:unsignedInt */
	unsigned int _bundleLightExit_Release;	/* required element of type xsd:unsignedInt */
	unsigned int _bundleLightElevator_Up;	/* required element of type xsd:unsignedInt */
	unsigned int _bundleLightElevator_Down;	/* required element of type xsd:unsignedInt */
	unsigned int _gasValve_Entry_Accept;	/* required element of type xsd:unsignedInt */
	unsigned int _gasValve_Entry_Deny;	/* required element of type xsd:unsignedInt */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__bundleLight
#define SOAP_TYPE_cmxDeviceService_ns__bundleLight (145)
/* ns:bundleLight */
class SOAP_CMAC ns__bundleLight : public ns__rootDevice
{
public:
	struct xsd_bundleLightProperty devBundleLightProperty;	/* required element of type xsd-bundleLightProperty */
	enum ns__enum_bundleLight model;	/* required element of type ns:enum-bundleLight */
	enum ns__enum_bundleLight bundleLightPower;	/* required element of type ns:enum-bundleLight */
	enum ns__enum_bundleLight bundleLightExit;	/* required element of type ns:enum-bundleLight */
	enum ns__enum_bundleLight readyEnergyPower;	/* required element of type ns:enum-bundleLight */
	enum ns__enum_bundleLight gasValve;	/* required element of type ns:enum-bundleLight */
	enum ns__enum_bundleLight bundleLightElevator;	/* required element of type ns:enum-bundleLight */
	enum ns__enum_devError bundleLightDevError;	/* required element of type ns:enum-devError */
	enum ns__bundleLightFunc func;	/* required element of type ns:bundleLightFunc */
public:
	virtual int soap_type() const { return 145; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__bundleLight */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__bundleLight()  { }
	virtual ~ns__bundleLight() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getBundleLightPropertyItemResponse
#define SOAP_TYPE_cmxDeviceService_ns__getBundleLightPropertyItemResponse (147)
/* ns:getBundleLightPropertyItemResponse */
class SOAP_CMAC ns__getBundleLightPropertyItemResponse
{
public:
	ns__bundleLight _return;	/* RPC return element */	/* required element of type ns:bundleLight */
public:
	virtual int soap_type() const { return 147; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getBundleLightPropertyItemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getBundleLightPropertyItemResponse()  { }
	virtual ~ns__getBundleLightPropertyItemResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getBundleLightItemResponse
#define SOAP_TYPE_cmxDeviceService_ns__getBundleLightItemResponse (148)
/* ns:getBundleLightItemResponse */
class SOAP_CMAC ns__getBundleLightItemResponse
{
public:
	ns__bundleLight _return;	/* RPC return element */	/* required element of type ns:bundleLight */
public:
	virtual int soap_type() const { return 148; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getBundleLightItemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getBundleLightItemResponse()  { }
	virtual ~ns__getBundleLightItemResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getBundleLightResponse
#define SOAP_TYPE_cmxDeviceService_ns__getBundleLightResponse (149)
/* ns:getBundleLightResponse */
class SOAP_CMAC ns__getBundleLightResponse
{
public:
	ns__bundleLight _return;	/* RPC return element */	/* required element of type ns:bundleLight */
public:
	virtual int soap_type() const { return 149; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getBundleLightResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getBundleLightResponse()  { }
	virtual ~ns__getBundleLightResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getBundleLightCountResponse
#define SOAP_TYPE_cmxDeviceService_ns__getBundleLightCountResponse (151)
/* ns:getBundleLightCountResponse */
struct ns__getBundleLightCountResponse
{
public:
	int *out;	/* RPC return element */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getBundleLightCount
#define SOAP_TYPE_cmxDeviceService_ns__getBundleLightCount (152)
/* ns:getBundleLightCount */
struct ns__getBundleLightCount
{
public:
	void *_;	/* transient */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getBundleLightPropertyItem
#define SOAP_TYPE_cmxDeviceService_ns__getBundleLightPropertyItem (155)
/* ns:getBundleLightPropertyItem */
struct ns__getBundleLightPropertyItem
{
public:
	int order;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getBundleLightItem
#define SOAP_TYPE_cmxDeviceService_ns__getBundleLightItem (158)
/* ns:getBundleLightItem */
struct ns__getBundleLightItem
{
public:
	int order;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getBundleLight
#define SOAP_TYPE_cmxDeviceService_ns__getBundleLight (161)
/* ns:getBundleLight */
struct ns__getBundleLight
{
public:
	ns__bundleLight in;	/* required element of type ns:bundleLight */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__setBundleLightResponse
#define SOAP_TYPE_cmxDeviceService_ns__setBundleLightResponse (162)
/* ns:setBundleLightResponse */
class SOAP_CMAC ns__setBundleLightResponse
{
public:
	virtual int soap_type() const { return 162; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__setBundleLightResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__setBundleLightResponse()  { }
	virtual ~ns__setBundleLightResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__setBundleLight
#define SOAP_TYPE_cmxDeviceService_ns__setBundleLight (165)
/* ns:setBundleLight */
struct ns__setBundleLight
{
public:
	ns__bundleLight in;	/* required element of type ns:bundleLight */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__BundleLightEventResponse
#define SOAP_TYPE_cmxDeviceService_ns__BundleLightEventResponse (167)
/* ns:BundleLightEventResponse */
struct ns__BundleLightEventResponse
{
public:
	int *out;	/* RPC return element */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__BundleLightEvent
#define SOAP_TYPE_cmxDeviceService_ns__BundleLightEvent (168)
/* ns:BundleLightEvent */
struct ns__BundleLightEvent
{
public:
	ns__bundleLight in;	/* required element of type ns:bundleLight */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_xsd_systemAirconProperty
#define SOAP_TYPE_cmxDeviceService_xsd_systemAirconProperty (170)
/* xsd-systemAirconProperty */
struct xsd_systemAirconProperty
{
public:
	unsigned int _systemAirconDo_Power_Start;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconDo_Power_Stop;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconDo_Power_AllRunning;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconDo_Power_AllStop;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconDo_WindDirection_UpDown;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconDo_WindDirection_LeftRight;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconDo_WindDirection_UpDownLeftRight;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconDo_WindDirection_Stop;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconDo_WindPower_Auto;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconDo_WindPower_Breeze;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconDo_WindPower_Middle;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconDo_WindPower_Super;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconDo_WindPower_Natural;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconDo_Drive_Auto;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconDo_Drive_Cool;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconDo_Drive_Humidity;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconDo_Drive_Ventilation;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconDo_Drive_Heating;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_Power_Start;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_Power_Stop;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_WindDirection_UpDown;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_WindDirection_LeftRight;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_WindDirection_UpDownLeftRight;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_WindDirection_Stop;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_WindPower_Auto;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_WindPower_Breeze;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_WindPower_Middle;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_WindPower_Super;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_WindPower_Natural;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_Drive_Driving;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_Drive_EventRelease;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_Drive_Auto;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_Drive_JaeSang;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_Drive_Ventilation;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_Drive_Humidity;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_Drive_Cooling;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_Drive_Heating;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_Tracking_Success;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_Tracking_Fail;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_Tracking_Searching;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_Tracking_End;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_Installation_Not_Exist;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_InnerRoom_Error_Normal;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_InnerRoom_Error_InnerTemperature;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_InnerRoom_Error_EVA_IN;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_InnerRoom_Error_FAN;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_InnerRoom_Error_Communication;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_InnerRoom_Error_Floating_Switch;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_InnerRoom_Error_Open_Two;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_InnerRoom_Error_EVA_OUT;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_OutRoom_Error_Normal;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_OutRoom_Error_Temp;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_OutRoom_Error_Sensor;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_OutRoom_Error_Cond;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_OutRoom_Error_Commnuication;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_OutRoom_Error_Error;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_OutRoom_Error_lowPower;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_OutRoom_Error_MagicalPower;	/* required element of type xsd:unsignedInt */
	unsigned int _systemAirconSt_OutRoom_Error_InitCommunication;	/* required element of type xsd:unsignedInt */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__systemAircon
#define SOAP_TYPE_cmxDeviceService_ns__systemAircon (171)
/* ns:systemAircon */
class SOAP_CMAC ns__systemAircon : public ns__rootDevice
{
public:
	struct xsd_systemAirconProperty devsystemAirconProperty;	/* required element of type xsd-systemAirconProperty */
	enum ns__enum_systemAircon model;	/* required element of type ns:enum-systemAircon */
	enum ns__enum_systemAircon systemAirconDo_Power;	/* required element of type ns:enum-systemAircon */
	enum ns__enum_systemAircon systemAirconDo_WindDirection;	/* required element of type ns:enum-systemAircon */
	enum ns__enum_systemAircon systemAirconDo_WindPower;	/* required element of type ns:enum-systemAircon */
	enum ns__enum_systemAircon systemAirconDo_Drive;	/* required element of type ns:enum-systemAircon */
	enum ns__enum_systemAircon systemAirconDo_StatusQuery;	/* required element of type ns:enum-systemAircon */
	enum ns__enum_systemAircon systemAirconSt_Power;	/* required element of type ns:enum-systemAircon */
	enum ns__enum_systemAircon systemAirconSt_WindDirection;	/* required element of type ns:enum-systemAircon */
	enum ns__enum_systemAircon systemAirconSt_WindPower;	/* required element of type ns:enum-systemAircon */
	enum ns__enum_systemAircon systemAirconSt_Drive;	/* required element of type ns:enum-systemAircon */
	enum ns__enum_systemAircon systemAirconSt_Tracking;	/* required element of type ns:enum-systemAircon */
	enum ns__enum_systemAircon systemAirconSt_Installation;	/* required element of type ns:enum-systemAircon */
	enum ns__enum_systemAircon systemAirconSt_InnerRoom_Error;	/* required element of type ns:enum-systemAircon */
	enum ns__enum_systemAircon systemAirconSt_OutRoom_Error;	/* required element of type ns:enum-systemAircon */
	int systemAirconDo_Temperature_Set;	/* required element of type xsd:int */
	int systemAirconSt_Temperature_Set;	/* required element of type xsd:int */
	int systemAirconSt_Temperature_Current;	/* required element of type xsd:int */
	enum ns__enum_devError systemAirconDevError;	/* required element of type ns:enum-devError */
	enum ns__systemAirconFunc func;	/* required element of type ns:systemAirconFunc */
public:
	virtual int soap_type() const { return 171; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__systemAircon */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__systemAircon()  { }
	virtual ~ns__systemAircon() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getSystemAirconPropertyItemResponse
#define SOAP_TYPE_cmxDeviceService_ns__getSystemAirconPropertyItemResponse (173)
/* ns:getSystemAirconPropertyItemResponse */
class SOAP_CMAC ns__getSystemAirconPropertyItemResponse
{
public:
	ns__systemAircon _return;	/* RPC return element */	/* required element of type ns:systemAircon */
public:
	virtual int soap_type() const { return 173; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getSystemAirconPropertyItemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getSystemAirconPropertyItemResponse()  { }
	virtual ~ns__getSystemAirconPropertyItemResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getSystemAirconItemResponse
#define SOAP_TYPE_cmxDeviceService_ns__getSystemAirconItemResponse (174)
/* ns:getSystemAirconItemResponse */
class SOAP_CMAC ns__getSystemAirconItemResponse
{
public:
	ns__systemAircon _return;	/* RPC return element */	/* required element of type ns:systemAircon */
public:
	virtual int soap_type() const { return 174; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getSystemAirconItemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getSystemAirconItemResponse()  { }
	virtual ~ns__getSystemAirconItemResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getSystemAirconResponse
#define SOAP_TYPE_cmxDeviceService_ns__getSystemAirconResponse (175)
/* ns:getSystemAirconResponse */
class SOAP_CMAC ns__getSystemAirconResponse
{
public:
	ns__systemAircon _return;	/* RPC return element */	/* required element of type ns:systemAircon */
public:
	virtual int soap_type() const { return 175; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getSystemAirconResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getSystemAirconResponse()  { }
	virtual ~ns__getSystemAirconResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getSystemAirconCountResponse
#define SOAP_TYPE_cmxDeviceService_ns__getSystemAirconCountResponse (177)
/* ns:getSystemAirconCountResponse */
struct ns__getSystemAirconCountResponse
{
public:
	int *out;	/* RPC return element */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getSystemAirconCount
#define SOAP_TYPE_cmxDeviceService_ns__getSystemAirconCount (178)
/* ns:getSystemAirconCount */
struct ns__getSystemAirconCount
{
public:
	void *_;	/* transient */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getSystemAirconPropertyItem
#define SOAP_TYPE_cmxDeviceService_ns__getSystemAirconPropertyItem (181)
/* ns:getSystemAirconPropertyItem */
struct ns__getSystemAirconPropertyItem
{
public:
	int order;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getSystemAirconItem
#define SOAP_TYPE_cmxDeviceService_ns__getSystemAirconItem (184)
/* ns:getSystemAirconItem */
struct ns__getSystemAirconItem
{
public:
	int order;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getSystemAircon
#define SOAP_TYPE_cmxDeviceService_ns__getSystemAircon (187)
/* ns:getSystemAircon */
struct ns__getSystemAircon
{
public:
	ns__systemAircon in;	/* required element of type ns:systemAircon */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__setSystemAirconResponse
#define SOAP_TYPE_cmxDeviceService_ns__setSystemAirconResponse (188)
/* ns:setSystemAirconResponse */
class SOAP_CMAC ns__setSystemAirconResponse
{
public:
	virtual int soap_type() const { return 188; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__setSystemAirconResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__setSystemAirconResponse()  { }
	virtual ~ns__setSystemAirconResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__setSystemAircon
#define SOAP_TYPE_cmxDeviceService_ns__setSystemAircon (191)
/* ns:setSystemAircon */
struct ns__setSystemAircon
{
public:
	ns__systemAircon in;	/* required element of type ns:systemAircon */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__systemAirconEventResponse
#define SOAP_TYPE_cmxDeviceService_ns__systemAirconEventResponse (193)
/* ns:systemAirconEventResponse */
struct ns__systemAirconEventResponse
{
public:
	int *out;	/* RPC return element */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__systemAirconEvent
#define SOAP_TYPE_cmxDeviceService_ns__systemAirconEvent (194)
/* ns:systemAirconEvent */
struct ns__systemAirconEvent
{
public:
	ns__systemAircon in;	/* required element of type ns:systemAircon */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_xsd_fanSystemProperty
#define SOAP_TYPE_cmxDeviceService_xsd_fanSystemProperty (196)
/* xsd-fanSystemProperty */
struct xsd_fanSystemProperty
{
public:
	unsigned int _fanSystemDo_Power_Off;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemDo_Power_On;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemDo_AutoFan_ElectricHeat;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemDo_AutoFan_GeneralFan;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemDo_FanMode_ElectricHeat;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemDo_FanMode_GeneralFan;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemDo_FanMode_Schedule;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemDo_FanMode_SleepingMode;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemDo_Wind_Off;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemDo_Wind_Low;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemDo_Wind_Middle;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemDo_Wind_High;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemDo_ReservationSet;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemDo_ReservationSet_Release;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemDo_ReservationSet_Running;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemDo_ReservationSet_NotRunning;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_Power_Off;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_Power_On;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_AutoFan_ElectricHeat;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_AutoFan_GeneralFan;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_CurrentFanMode_AutoFan;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_FanMode_ElectricHeat;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_FanMode_GeneralFan;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_FanMode_Schedule;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_FanMode_SleepingMode;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_CurrentFanMode_Manual;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_Wind_Off;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_Wind_Low;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_Wind_Middle;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_Wind_High;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_ReservationSet;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_ReservationSet_Release;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_ReservationSet_Running;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_ReservationSet_NotRunning;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_FanReservationSetMode_Hour;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_FanReservationSetMode_Minute;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_FanReservation_Hour;	/* sequence of 1 to 7 elements of type xsd:unsignedInt */
	unsigned int _fanSystemSt_FanReservation_Minute;	/* sequence of 1 to 7 elements of type xsd:unsignedInt */
	unsigned int _fanSystemSt_SensorMode_NotExistSenosr;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_SensorMode_GasSenosr;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_SensorMode_CO2Senosr;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_DamperMode_NotExist;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_DamperMode_Exist;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_FilterEmpressMode_Clean;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_FilterEmpressMode_Change;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_FilterEmpressMode_FEChange;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_FilterEmpressMode_Normal;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_AlarmMode_Normal;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_AlarmMode_HighSpeedMotor;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_AlarmMode_VentilationMotor;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_AlarmMode_DamperMotor;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_AlarmMode_CO2;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_AlarmMode_TemperatureMotor;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_AlarmMode_OverHeating;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_AlarmMode_DeviceProtect;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_CO2_DensityMode_CO2High;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_CO2_DensityMode_CO2Low;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_CO2_Density_High;	/* sequence of 1 to 7 elements of type xsd:unsignedInt */
	unsigned int _fanSystemSt_CO2_Density_Low;	/* sequence of 1 to 7 elements of type xsd:unsignedInt */
	unsigned int _fanSystemSt_GAS_Density_Low;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_GAS_Density_Middle;	/* required element of type xsd:unsignedInt */
	unsigned int _fanSystemSt_GAS_Density_High;	/* required element of type xsd:unsignedInt */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__fanSystem
#define SOAP_TYPE_cmxDeviceService_ns__fanSystem (197)
/* ns:fanSystem */
class SOAP_CMAC ns__fanSystem : public ns__rootDevice
{
public:
	struct xsd_fanSystemProperty devFanSystemProperty;	/* required element of type xsd-fanSystemProperty */
	enum ns__enum_fanSystem model;	/* required element of type ns:enum-fanSystem */
	enum ns__enum_fanSystem fanSystemDo_Power;	/* required element of type ns:enum-fanSystem */
	enum ns__enum_fanSystem fanSystemDo_AutoFan;	/* required element of type ns:enum-fanSystem */
	enum ns__enum_fanSystem fanSystemDo_FanMode;	/* required element of type ns:enum-fanSystem */
	enum ns__enum_fanSystem fanSystemDo_FanWind;	/* required element of type ns:enum-fanSystem */
	enum ns__enum_fanSystem fanSystemDo_FanReservationSet;	/* required element of type ns:enum-fanSystem */
	enum ns__enum_fanSystem fanSystemSt_Power;	/* required element of type ns:enum-fanSystem */
	enum ns__enum_fanSystem fanSystemSt_AutoFan;	/* required element of type ns:enum-fanSystem */
	enum ns__enum_fanSystem fanSystemSt_FanMode;	/* required element of type ns:enum-fanSystem */
	enum ns__enum_fanSystem fanSystemSt_CurrentFanMode;	/* required element of type ns:enum-fanSystem */
	enum ns__enum_fanSystem fanSystemSt_FanWind;	/* required element of type ns:enum-fanSystem */
	enum ns__enum_fanSystem fanSystemSt_FanReservationSet;	/* required element of type ns:enum-fanSystem */
	enum ns__enum_fanSystem fanSystemSt_FanReservationSetMode;	/* required element of type ns:enum-fanSystem */
	int fanReservation_Hour;	/* required element of type xsd:int */
	int fanReservation_Minute;	/* required element of type xsd:int */
	enum ns__enum_fanSystem fanSystemSt_SensorMode;	/* required element of type ns:enum-fanSystem */
	enum ns__enum_fanSystem fanSystemSt_DamperMode;	/* required element of type ns:enum-fanSystem */
	enum ns__enum_fanSystem fanSystemSt_FilterEmpressMode;	/* required element of type ns:enum-fanSystem */
	enum ns__enum_fanSystem fanSystemSt_AlarmMode;	/* required element of type ns:enum-fanSystem */
	int fanSystemSt_Temperature;	/* required element of type xsd:int */
	enum ns__enum_fanSystem fanSystemSt_CO2_DensityMode;	/* required element of type ns:enum-fanSystem */
	int fanSystemSt_CO2_Density_High;	/* required element of type xsd:int */
	int fanSystemSt_CO2_Density_Low;	/* required element of type xsd:int */
	enum ns__enum_fanSystem fanSystemSt_GAS_Density;	/* required element of type ns:enum-fanSystem */
	enum ns__enum_devError fanSystemDevError;	/* required element of type ns:enum-devError */
	enum ns__fanSystemFunc func;	/* required element of type ns:fanSystemFunc */
public:
	virtual int soap_type() const { return 197; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__fanSystem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__fanSystem()  { }
	virtual ~ns__fanSystem() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getFanSystemPropertyItemResponse
#define SOAP_TYPE_cmxDeviceService_ns__getFanSystemPropertyItemResponse (199)
/* ns:getFanSystemPropertyItemResponse */
class SOAP_CMAC ns__getFanSystemPropertyItemResponse
{
public:
	ns__fanSystem _return;	/* RPC return element */	/* required element of type ns:fanSystem */
public:
	virtual int soap_type() const { return 199; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getFanSystemPropertyItemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getFanSystemPropertyItemResponse()  { }
	virtual ~ns__getFanSystemPropertyItemResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getFanSystemItemResponse
#define SOAP_TYPE_cmxDeviceService_ns__getFanSystemItemResponse (200)
/* ns:getFanSystemItemResponse */
class SOAP_CMAC ns__getFanSystemItemResponse
{
public:
	ns__fanSystem _return;	/* RPC return element */	/* required element of type ns:fanSystem */
public:
	virtual int soap_type() const { return 200; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getFanSystemItemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getFanSystemItemResponse()  { }
	virtual ~ns__getFanSystemItemResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getFanSystemResponse
#define SOAP_TYPE_cmxDeviceService_ns__getFanSystemResponse (201)
/* ns:getFanSystemResponse */
class SOAP_CMAC ns__getFanSystemResponse
{
public:
	ns__fanSystem _return;	/* RPC return element */	/* required element of type ns:fanSystem */
public:
	virtual int soap_type() const { return 201; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getFanSystemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getFanSystemResponse()  { }
	virtual ~ns__getFanSystemResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getFanSystemCountResponse
#define SOAP_TYPE_cmxDeviceService_ns__getFanSystemCountResponse (203)
/* ns:getFanSystemCountResponse */
struct ns__getFanSystemCountResponse
{
public:
	int *out;	/* RPC return element */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getFanSystemCount
#define SOAP_TYPE_cmxDeviceService_ns__getFanSystemCount (204)
/* ns:getFanSystemCount */
struct ns__getFanSystemCount
{
public:
	void *_;	/* transient */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getFanSystemPropertyItem
#define SOAP_TYPE_cmxDeviceService_ns__getFanSystemPropertyItem (207)
/* ns:getFanSystemPropertyItem */
struct ns__getFanSystemPropertyItem
{
public:
	int order;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getFanSystemItem
#define SOAP_TYPE_cmxDeviceService_ns__getFanSystemItem (210)
/* ns:getFanSystemItem */
struct ns__getFanSystemItem
{
public:
	int order;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getFanSystem
#define SOAP_TYPE_cmxDeviceService_ns__getFanSystem (213)
/* ns:getFanSystem */
struct ns__getFanSystem
{
public:
	ns__fanSystem in;	/* required element of type ns:fanSystem */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__setFanSystemResponse
#define SOAP_TYPE_cmxDeviceService_ns__setFanSystemResponse (214)
/* ns:setFanSystemResponse */
class SOAP_CMAC ns__setFanSystemResponse
{
public:
	virtual int soap_type() const { return 214; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__setFanSystemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__setFanSystemResponse()  { }
	virtual ~ns__setFanSystemResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__setFanSystem
#define SOAP_TYPE_cmxDeviceService_ns__setFanSystem (217)
/* ns:setFanSystem */
struct ns__setFanSystem
{
public:
	ns__fanSystem in;	/* required element of type ns:fanSystem */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__FanSystemEventResponse
#define SOAP_TYPE_cmxDeviceService_ns__FanSystemEventResponse (219)
/* ns:FanSystemEventResponse */
struct ns__FanSystemEventResponse
{
public:
	int *out;	/* RPC return element */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__FanSystemEvent
#define SOAP_TYPE_cmxDeviceService_ns__FanSystemEvent (220)
/* ns:FanSystemEvent */
struct ns__FanSystemEvent
{
public:
	ns__fanSystem in;	/* required element of type ns:fanSystem */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_xsd_SecuritySensorProperty
#define SOAP_TYPE_cmxDeviceService_xsd_SecuritySensorProperty (222)
/* xsd-SecuritySensorProperty */
struct xsd_SecuritySensorProperty
{
public:
	unsigned int _securitySensorSt_Detected;	/* required element of type xsd:unsignedInt */
	unsigned int _securitySensorSt_UnDetected;	/* required element of type xsd:unsignedInt */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__securitySensor
#define SOAP_TYPE_cmxDeviceService_ns__securitySensor (223)
/* ns:securitySensor */
class SOAP_CMAC ns__securitySensor : public ns__rootDevice
{
public:
	struct xsd_SecuritySensorProperty devSecuritySensorProperty;	/* required element of type xsd-SecuritySensorProperty */
	int securitySensorStMainChannel;	/* required element of type xsd:int */
	enum ns__enum_securitySensor model;	/* required element of type ns:enum-securitySensor */
	enum ns__enum_securitySensor securitySensorStSubChannel_One;	/* required element of type ns:enum-securitySensor */
	enum ns__enum_securitySensor securitySensorStSubChannel_Two;	/* required element of type ns:enum-securitySensor */
	enum ns__enum_securitySensor securitySensorStSubChannel_Three;	/* required element of type ns:enum-securitySensor */
	enum ns__enum_securitySensor securitySensorStSubChannel_Four;	/* required element of type ns:enum-securitySensor */
	enum ns__enum_securitySensor securitySensorStSubChannel_Five;	/* required element of type ns:enum-securitySensor */
	enum ns__enum_securitySensor securitySensorStSubChannel_Six;	/* required element of type ns:enum-securitySensor */
	enum ns__enum_securitySensor securitySensorStSubChannel_Seven;	/* required element of type ns:enum-securitySensor */
	enum ns__enum_securitySensor securitySensorStSubChannel_Eight;	/* required element of type ns:enum-securitySensor */
	enum ns__enum_devError securitySensorDevError;	/* required element of type ns:enum-devError */
	enum ns__securitySensorFunc func;	/* required element of type ns:securitySensorFunc */
public:
	virtual int soap_type() const { return 223; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__securitySensor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__securitySensor()  { }
	virtual ~ns__securitySensor() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getSecuritySensorPropertyItemResponse
#define SOAP_TYPE_cmxDeviceService_ns__getSecuritySensorPropertyItemResponse (225)
/* ns:getSecuritySensorPropertyItemResponse */
class SOAP_CMAC ns__getSecuritySensorPropertyItemResponse
{
public:
	ns__securitySensor _return;	/* RPC return element */	/* required element of type ns:securitySensor */
public:
	virtual int soap_type() const { return 225; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getSecuritySensorPropertyItemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getSecuritySensorPropertyItemResponse()  { }
	virtual ~ns__getSecuritySensorPropertyItemResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getSecuritySensorItemResponse
#define SOAP_TYPE_cmxDeviceService_ns__getSecuritySensorItemResponse (226)
/* ns:getSecuritySensorItemResponse */
class SOAP_CMAC ns__getSecuritySensorItemResponse
{
public:
	ns__securitySensor _return;	/* RPC return element */	/* required element of type ns:securitySensor */
public:
	virtual int soap_type() const { return 226; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getSecuritySensorItemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getSecuritySensorItemResponse()  { }
	virtual ~ns__getSecuritySensorItemResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getSecuritySensorResponse
#define SOAP_TYPE_cmxDeviceService_ns__getSecuritySensorResponse (227)
/* ns:getSecuritySensorResponse */
class SOAP_CMAC ns__getSecuritySensorResponse
{
public:
	ns__securitySensor _return;	/* RPC return element */	/* required element of type ns:securitySensor */
public:
	virtual int soap_type() const { return 227; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__getSecuritySensorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__getSecuritySensorResponse()  { }
	virtual ~ns__getSecuritySensorResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getSecuritySensorCountResponse
#define SOAP_TYPE_cmxDeviceService_ns__getSecuritySensorCountResponse (229)
/* ns:getSecuritySensorCountResponse */
struct ns__getSecuritySensorCountResponse
{
public:
	int *out;	/* RPC return element */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getSecuritySensorCount
#define SOAP_TYPE_cmxDeviceService_ns__getSecuritySensorCount (230)
/* ns:getSecuritySensorCount */
struct ns__getSecuritySensorCount
{
public:
	void *_;	/* transient */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getSecuritySensorPropertyItem
#define SOAP_TYPE_cmxDeviceService_ns__getSecuritySensorPropertyItem (233)
/* ns:getSecuritySensorPropertyItem */
struct ns__getSecuritySensorPropertyItem
{
public:
	int order;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getSecuritySensorItem
#define SOAP_TYPE_cmxDeviceService_ns__getSecuritySensorItem (236)
/* ns:getSecuritySensorItem */
struct ns__getSecuritySensorItem
{
public:
	int order;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__getSecuritySensor
#define SOAP_TYPE_cmxDeviceService_ns__getSecuritySensor (239)
/* ns:getSecuritySensor */
struct ns__getSecuritySensor
{
public:
	ns__securitySensor in;	/* required element of type ns:securitySensor */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__setSecuritySensorResponse
#define SOAP_TYPE_cmxDeviceService_ns__setSecuritySensorResponse (240)
/* ns:setSecuritySensorResponse */
class SOAP_CMAC ns__setSecuritySensorResponse
{
public:
	virtual int soap_type() const { return 240; } /* = unique id SOAP_TYPE_cmxDeviceService_ns__setSecuritySensorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__setSecuritySensorResponse()  { }
	virtual ~ns__setSecuritySensorResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__setSecuritySensor
#define SOAP_TYPE_cmxDeviceService_ns__setSecuritySensor (243)
/* ns:setSecuritySensor */
struct ns__setSecuritySensor
{
public:
	ns__securitySensor in;	/* required element of type ns:securitySensor */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__securitySensorEventResponse
#define SOAP_TYPE_cmxDeviceService_ns__securitySensorEventResponse (245)
/* ns:securitySensorEventResponse */
struct ns__securitySensorEventResponse
{
public:
	int *out;	/* RPC return element */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__securitySensorEvent
#define SOAP_TYPE_cmxDeviceService_ns__securitySensorEvent (246)
/* ns:securitySensorEvent */
struct ns__securitySensorEvent
{
public:
	ns__securitySensor in;	/* required element of type ns:securitySensor */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__subcribeEventResponse
#define SOAP_TYPE_cmxDeviceService_ns__subcribeEventResponse (248)
/* ns:subcribeEventResponse */
struct ns__subcribeEventResponse
{
public:
	int *out;	/* RPC return element */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_ns__subcribeEvent
#define SOAP_TYPE_cmxDeviceService_ns__subcribeEvent (249)
/* ns:subcribeEvent */
struct ns__subcribeEvent
{
public:
	int port;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_SOAP_ENV__Header
#define SOAP_TYPE_cmxDeviceService_SOAP_ENV__Header (250)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	void *dummy;	/* transient */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_SOAP_ENV__Code
#define SOAP_TYPE_cmxDeviceService_SOAP_ENV__Code (251)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_SOAP_ENV__Detail
#define SOAP_TYPE_cmxDeviceService_SOAP_ENV__Detail (253)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_SOAP_ENV__Reason
#define SOAP_TYPE_cmxDeviceService_SOAP_ENV__Reason (254)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_cmxDeviceService_SOAP_ENV__Fault
#define SOAP_TYPE_cmxDeviceService_SOAP_ENV__Fault (255)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_cmxDeviceService__XML
#define SOAP_TYPE_cmxDeviceService__XML (4)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_cmxDeviceService__QName
#define SOAP_TYPE_cmxDeviceService__QName (5)
typedef char *_QName;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operations                                                         *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 ns__getDeviceCategoryCount(struct soap*, void *_, int *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getDeviceCategoryItem(struct soap*, int order, ns__getDeviceCategoryItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getDeviceCategory(struct soap*, ns__deviceCategory in, ns__getDeviceCategoryResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__setDeviceCategory(struct soap*, ns__deviceCategory in, ns__setDeviceCategoryResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__deviceCategoryEvent(struct soap*, ns__deviceCategory in, int *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getBoilerCount(struct soap*, void *_, int *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getBoilerPropertyItem(struct soap*, int order, ns__getBoilerPropertyItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getBoilerItem(struct soap*, int order, ns__getBoilerItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getBoiler(struct soap*, ns__boiler in, ns__getBoilerResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__setBoiler(struct soap*, ns__boiler in, ns__setBoilerResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__boilerEvent(struct soap*, ns__boiler in, int *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getLightCount(struct soap*, void *_, int *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getLightPropertyItem(struct soap*, int order, ns__getLightPropertyItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getLightItem(struct soap*, int order, ns__getLightItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getLight(struct soap*, ns__light in, ns__getLightResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__setLight(struct soap*, ns__light in, ns__setLightResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__lightEvent(struct soap*, ns__light in, int *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getGasValveCount(struct soap*, void *_, int *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getGasValvePropertyItem(struct soap*, int order, ns__getGasValvePropertyItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getGasValveItem(struct soap*, int order, ns__getGasValveItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getGasValve(struct soap*, ns__gasValve in, ns__getGasValveResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__setGasValve(struct soap*, ns__gasValve in, ns__setGasValveResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__gasValveEvent(struct soap*, ns__gasValve in, int *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getCurtainCount(struct soap*, void *_, int *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getCurtainPropertyItem(struct soap*, int order, ns__getCurtainPropertyItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getCurtainItem(struct soap*, int order, ns__getCurtainItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getCurtain(struct soap*, ns__curtain in, ns__getCurtainResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__setCurtain(struct soap*, ns__curtain in, ns__setCurtainResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__curtainEvent(struct soap*, ns__curtain in, int *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getBundleLightCount(struct soap*, void *_, int *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getBundleLightPropertyItem(struct soap*, int order, ns__getBundleLightPropertyItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getBundleLightItem(struct soap*, int order, ns__getBundleLightItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getBundleLight(struct soap*, ns__bundleLight in, ns__getBundleLightResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__setBundleLight(struct soap*, ns__bundleLight in, ns__setBundleLightResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__BundleLightEvent(struct soap*, ns__bundleLight in, int *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getSystemAirconCount(struct soap*, void *_, int *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getSystemAirconPropertyItem(struct soap*, int order, ns__getSystemAirconPropertyItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getSystemAirconItem(struct soap*, int order, ns__getSystemAirconItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getSystemAircon(struct soap*, ns__systemAircon in, ns__getSystemAirconResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__setSystemAircon(struct soap*, ns__systemAircon in, ns__setSystemAirconResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__systemAirconEvent(struct soap*, ns__systemAircon in, int *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getFanSystemCount(struct soap*, void *_, int *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getFanSystemPropertyItem(struct soap*, int order, ns__getFanSystemPropertyItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getFanSystemItem(struct soap*, int order, ns__getFanSystemItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getFanSystem(struct soap*, ns__fanSystem in, ns__getFanSystemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__setFanSystem(struct soap*, ns__fanSystem in, ns__setFanSystemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__FanSystemEvent(struct soap*, ns__fanSystem in, int *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getSecuritySensorCount(struct soap*, void *_, int *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getSecuritySensorPropertyItem(struct soap*, int order, ns__getSecuritySensorPropertyItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getSecuritySensorItem(struct soap*, int order, ns__getSecuritySensorItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__getSecuritySensor(struct soap*, ns__securitySensor in, ns__getSecuritySensorResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__setSecuritySensor(struct soap*, ns__securitySensor in, ns__setSecuritySensorResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__securitySensorEvent(struct soap*, ns__securitySensor in, int *out);

SOAP_FMAC5 int SOAP_FMAC6 ns__subcribeEvent(struct soap*, int port, int *out);

/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getDeviceCategoryCount(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, int *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getDeviceCategoryItem(struct soap *soap, const char *soap_endpoint, const char *soap_action, int order, ns__getDeviceCategoryItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getDeviceCategory(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__deviceCategory in, ns__getDeviceCategoryResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__setDeviceCategory(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__deviceCategory in, ns__setDeviceCategoryResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__deviceCategoryEvent(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__deviceCategory in, int *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getBoilerCount(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, int *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getBoilerPropertyItem(struct soap *soap, const char *soap_endpoint, const char *soap_action, int order, ns__getBoilerPropertyItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getBoilerItem(struct soap *soap, const char *soap_endpoint, const char *soap_action, int order, ns__getBoilerItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getBoiler(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__boiler in, ns__getBoilerResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__setBoiler(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__boiler in, ns__setBoilerResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__boilerEvent(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__boiler in, int *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getLightCount(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, int *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getLightPropertyItem(struct soap *soap, const char *soap_endpoint, const char *soap_action, int order, ns__getLightPropertyItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getLightItem(struct soap *soap, const char *soap_endpoint, const char *soap_action, int order, ns__getLightItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getLight(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__light in, ns__getLightResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__setLight(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__light in, ns__setLightResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__lightEvent(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__light in, int *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getGasValveCount(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, int *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getGasValvePropertyItem(struct soap *soap, const char *soap_endpoint, const char *soap_action, int order, ns__getGasValvePropertyItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getGasValveItem(struct soap *soap, const char *soap_endpoint, const char *soap_action, int order, ns__getGasValveItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getGasValve(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__gasValve in, ns__getGasValveResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__setGasValve(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__gasValve in, ns__setGasValveResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__gasValveEvent(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__gasValve in, int *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getCurtainCount(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, int *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getCurtainPropertyItem(struct soap *soap, const char *soap_endpoint, const char *soap_action, int order, ns__getCurtainPropertyItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getCurtainItem(struct soap *soap, const char *soap_endpoint, const char *soap_action, int order, ns__getCurtainItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getCurtain(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__curtain in, ns__getCurtainResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__setCurtain(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__curtain in, ns__setCurtainResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__curtainEvent(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__curtain in, int *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getBundleLightCount(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, int *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getBundleLightPropertyItem(struct soap *soap, const char *soap_endpoint, const char *soap_action, int order, ns__getBundleLightPropertyItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getBundleLightItem(struct soap *soap, const char *soap_endpoint, const char *soap_action, int order, ns__getBundleLightItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getBundleLight(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__bundleLight in, ns__getBundleLightResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__setBundleLight(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__bundleLight in, ns__setBundleLightResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__BundleLightEvent(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__bundleLight in, int *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getSystemAirconCount(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, int *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getSystemAirconPropertyItem(struct soap *soap, const char *soap_endpoint, const char *soap_action, int order, ns__getSystemAirconPropertyItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getSystemAirconItem(struct soap *soap, const char *soap_endpoint, const char *soap_action, int order, ns__getSystemAirconItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getSystemAircon(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__systemAircon in, ns__getSystemAirconResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__setSystemAircon(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__systemAircon in, ns__setSystemAirconResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__systemAirconEvent(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__systemAircon in, int *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getFanSystemCount(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, int *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getFanSystemPropertyItem(struct soap *soap, const char *soap_endpoint, const char *soap_action, int order, ns__getFanSystemPropertyItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getFanSystemItem(struct soap *soap, const char *soap_endpoint, const char *soap_action, int order, ns__getFanSystemItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getFanSystem(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__fanSystem in, ns__getFanSystemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__setFanSystem(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__fanSystem in, ns__setFanSystemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__FanSystemEvent(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__fanSystem in, int *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getSecuritySensorCount(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, int *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getSecuritySensorPropertyItem(struct soap *soap, const char *soap_endpoint, const char *soap_action, int order, ns__getSecuritySensorPropertyItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getSecuritySensorItem(struct soap *soap, const char *soap_endpoint, const char *soap_action, int order, ns__getSecuritySensorItemResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getSecuritySensor(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__securitySensor in, ns__getSecuritySensorResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__setSecuritySensor(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__securitySensor in, ns__setSecuritySensorResponse *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__securitySensorEvent(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns__securitySensor in, int *out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__subcribeEvent(struct soap *soap, const char *soap_endpoint, const char *soap_action, int port, int *out);

/******************************************************************************\
 *                                                                            *
 * Skeletons                                                                  *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 cmxDeviceService_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 cmxDeviceService_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getDeviceCategoryCount(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getDeviceCategoryItem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getDeviceCategory(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__setDeviceCategory(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__deviceCategoryEvent(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getBoilerCount(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getBoilerPropertyItem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getBoilerItem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getBoiler(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__setBoiler(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__boilerEvent(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getLightCount(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getLightPropertyItem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getLightItem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getLight(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__setLight(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__lightEvent(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getGasValveCount(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getGasValvePropertyItem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getGasValveItem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getGasValve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__setGasValve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__gasValveEvent(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getCurtainCount(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getCurtainPropertyItem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getCurtainItem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getCurtain(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__setCurtain(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__curtainEvent(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getBundleLightCount(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getBundleLightPropertyItem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getBundleLightItem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getBundleLight(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__setBundleLight(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__BundleLightEvent(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getSystemAirconCount(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getSystemAirconPropertyItem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getSystemAirconItem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getSystemAircon(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__setSystemAircon(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__systemAirconEvent(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getFanSystemCount(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getFanSystemPropertyItem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getFanSystemItem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getFanSystem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__setFanSystem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__FanSystemEvent(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getSecuritySensorCount(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getSecuritySensorPropertyItem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getSecuritySensorItem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getSecuritySensor(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__setSecuritySensor(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__securitySensorEvent(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__subcribeEvent(struct soap*);

} // namespace cmxDeviceService


#endif

/* End of cmxDeviceServiceStub.h */
